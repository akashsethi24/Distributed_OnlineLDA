Neural Control for Rolling Mills: Incorporating 
Domain Theories to Overcome Data Deficiency 
Martin RSscheisen 
Computer Science Dept. 
Munich Technical University 
8 Munich 40, FRG 
Reimar Hofmann 
Computer Science Dept. 
Edinburgh University 
Edinburgh, EH89A, UK 
Volker Tresp 
Corporate R & D 
Siemens AG 
8 Munich 83, FRG 
Abstract 
In a Bayesian framework, we give a principled account of how domain- 
specific prior knowledge such as imperfect analytic domain theories can be 
optimally incorporated into networks of locally-tuned units: by choosing 
a specific architecture and by applying a specific training regimen. Our 
method proved successful in overcoming the data deficiency problem in 
a large-scale application to devise a neural control for a hot line rolling 
mill. It achieves in this application significantly higher accuracy than 
optimally-tuned standard algorithms such as sigmoidal backpropagation, 
and outperforms the state-of-the-art solution. 
I INTRODUCTION 
Learning in connectionist networks typically requires many training examples and 
relies more or less explicitly on some kind of synacic preference bias such as mini- 
mal architecture (Rumelhart, 1988; Le Cun e al., 1990; Weigend, 1991; inter alia) 
or a smoothness constraint operator (Poggio e! al., 1990), but does not make use of 
explicit representations of domain-specific prior knowledge. If training data is defi- 
cient, learning a functional mapping inductively may no longer be feasible, whereas 
this may still be the case when guided by domain knowledge. Controlling a rolling 
mill is an example of a large-scale real-world application where training data is 
very scarce and noisy, yet there exist much refined, though still very approximate, 
analytic models that have been applied for the past decades and embody many 
years of experience in this particular domain. Much in the spirit of Explanation- 
659 
660 R6scheisen, Holmann, and Tresp 
Based Learning (see, for example, Mitchell e! al., 1986; Minton et al., 1986), where 
domain knowledge is applied to get valid generalizations from only a few training 
examples, we consider an analytic model as an imperfect domain theory from which 
the training data is explained (see also Scott et al., 1991; Bergadano et al., 1990; 
Tecuci et al., 1990). Using a Bayesian framework, we consider in Section 2 the 
optimal response of networks in the presence of noise on their input, and derive, 
in Section 2.1, a familiar localized network architecture (Moody et al., 1989, 1990). 
In Section 2.2, we show how domain knowledge can be readily incorporated into 
this localized network by applying a specific training regimen. These results were 
applied as part of a project to devise a neural control for a hot line rolling mill, and, 
in Section 3, we describe experimental results which indicate that incorporating 
domain theories can be indispensable for connectionist networks to be successful 
in difficult engineering domains. (See also references for one of our more detailed 
papers.) 
2 THEORETICAL FOUNDATION 
2.1 NETWORK ARCHITECTURE 
We apply a Bayesian framework to systems where the training data is assumed to 
be generated from the true model f, which itself is considered to be derived from a 
domain theory b that is represented as a function. Since the measurements in our ap- 
plication are very noisy and clustered, we took this as the paradigm case, and assume 
the actual input XE]R d to be a noisy version of one of a small number (N) of proto- 
typical input vectors ,..., 'NE]R d where the noise is additive with covariance ma- 
trix . The corresponding true output values f('l),..., f('N) ]R are assumed to be 
distributed around the values suggested by the domain theory, b('l),..., b('N) (vari- 
ance rrp2rior ). Thus, each point in the training data D :- {(i,yi);i- 1,...,M} is 
considered to be generated as follows: i is obtained by selecting one of the/k and 
adding zero-mean noise with covariance , and yi is generated by adding Gaussian 
zero-mean noise with variance 2 to f('k).l We determine the system's response 
O'data 
O() to an input a to be optimal with respect to the expectation of the squared 
error (MMSE-estimate): 
O(a) := argmin �((f(Tt,) - o())2). 
o() 
The expectation is given by yN=l P(Tm,, = /I X = )-(f(/)- o()) 2. Bayes' 
Theorem states that P(Tm, = il X = ) = p(X = [Tt,., : i) ' P(Tm, = 
Fi) / p(X - ). Under the assumption that all  are equally likely, simplifying the 
derivative of the expectation yields 
= 
XThis approach is related to Nowlan (1990) and MacKay (1991), but we emphasize the 
influence of different priors over the hypothesis space by giving preference to hypotheses 
that are closer to the domain theory. 
Neural Control for Rolling Mills 661 
where C/equals �(f(f/)lD), i.e. the expected value of f(f/) given that the training 
data is exactly D. Assuming the input noise to be Gaussian and P,, unless otherwise 
noted, to be diagonal, P, = ((SijO')l_<i,j_<d, the probability density of X under the 
assumption that Ttr, equals f'k is given by 
where I . 
written as 
is the determinant. The optimal response to an input  can now be 
=1 exp[- �( - F/)  E -1 (- F/)]-Ci 
O(x) = E/= exp[--}( - /) E - (- F/)] (1) 
Equation 1 corresponds to a network architecture with N Gaussian Basis Functions 
(GBFs) centered at f, k = 1,..., N, each of which has a width eri, i = 1,..., d, 
along the i-th dimension, and an output weight C. This architecture is known 
to give smooth function approximations (Poggio et al., 1990; see also Platt, 1990), 
and the normalized response function (partitioning-to-one) was noted earlier in 
studies by Moody et al. (1988, 1989, 1990) to be beneficial to network performance. 
Carving up an input space into hyperquadrics (typically hyperellipsoids or just 
hyperspheres) in this way suffers in practice from the severe drawback that as soon 
as the dimensionality of the input is higher, it becomes less feasible to cover the 
whole space with units of only local relevance (curse of dimensionality). The 
normalized response function has an essentially space-filling effect, and fewer units 
have to be allocated while, at the same time, most of the locality properties can be 
preserved such that efficient ball tree data structures (Omohundro, 1991) can still 
be used. If the distances between the centers are large with respect to their widths, 
the nearest-neighbor rule is recovered. With decreasing distances, the output of the 
network changes more smoothly between the centers. 
2.2 TRAINING REGIMEN 
The output weights Ci are given by 
G: z.p(f(i)= zlD)dz. 
Bayes' Theorem states that p(f(i)= z]D)= p(Dlf(i ) = z)'p(f(fi)= z)/p(D). 
Let M(i) denote the set of indices j of the training data points (xj, yj) that were 
generated by adding noise to (/,f(/)), i.e. the points that originated from /. 
Note that it is not known a priori which indices a set M(i) contains; only posterior 
probabilities can be given. By applying_.Bayes' Theorem and by assuming the 
independence between different locations ti, the coefficients Ci can be written as = 
2The normalization constants of the Gaussians in numerator and denominator cancel 
as well as the product for all mCM(i) of the probabilities that (m, ym) is in the data set. 
662 R6scheisen, Holmann, and Tresp 
It can be easily shown that this simplifies to 
Ci = Y-meM(i) Ym + k . b(Fi) 
IM(i)I + k 
where k: erata/errior and l-I denotes the cardinality operator. In accordance 
with intuition, the coefficients Ci turn out to be a weighted mean between the value 
suggested by the domain theory b and the training data values which originated 
from F/. The weighting factor k/([M(i)l + k) reflects the relative reliability of the 
two sources of information, the empirical data and the prior knowledge� 
Define Si as Si -- (Ci -- b('k)) . k + EmeM(i)(Ci -- Ym). Clearly, if ISil is minimized 
to 0, then Ci reaches exactly the optimal value as it is given by equation 2. An 
adaptive solution to this is to update Ci according to Ci = -7' Si. Since the 
membership distribution for M(i) is not known a priori, we approximate it using a 
posterior estimate of the probability p(m  M(i)l, ) that m is in M(i) given that 
, was generated by some center Fk, which is 
p(x = - is the activation acti of the i-th center, when the network is 
presented with input ,. Substituting the equation in the sum of $i leads to the 
following training regimen: Using stochastic sample-by-sample learning, we present 
in each training step with probability 1 - ,X a data point yj, and with probability ,X 
a point b(') that is generated from the domain theory, where ,X is given by 
k.N 
.,X:= k.N+M' (3) 
(Recall that M is the total number of data points, and N is the number of centers.) 
 varies from 0 (the data is far more reliable than the prior knowledge) to I (the 
data is unreliable in comparison with the prior knowledge)� Thus, the change of Ci 
after each presentation is proportional to the error times the normalized activation 
of the i-th center, acti / N 
Ek:l actk. 
The optimal positions for the centers F/are not known in advance, and we therefore 
perform standard LMS gradient descent on F/, and on the widths ai. The weight 
updates in a learning step are given by a discretization of the following dynamic 
equations (i:1,...,N; j=l,... ,d): 
27-A. acti � 
Ci - 0( ) 1 
N 
act tij) 
� (xj - til) 
Zk=l aCtk 
where A is the interpolation error, acti is the (forward-computed) activity of the 
the i-th center, and tij and xj are the j-th component of / and  respectively. 
Neural Control for Rolling Mills 663 
APPLICATION TO ROLLING MILL CONTROL 
3.1 THE PROBLEM 
In integrated steelworks, the finishing train of the hot line rolling mill transforms 
preprocessed steel from a casting successively into a homogeneously rolled steel- 
plate. Controlling this process is a notor
