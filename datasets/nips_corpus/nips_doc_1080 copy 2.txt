Does the Wake-sleep Algorithm 
Produce Good Density Estimators? 
Brendan J. Frey, Geoffrey E. Hinton 
Department of Computer Science 
University of Toronto 
Toronto, ON M5S 1A4, Canada 
{frey, hinton} @cs.toronto.edu 
Peter Dayan 
Department of Brain and Cognitive Sciences 
Massachusetts Institute of Technology 
Cambridge, MA 02139, USA 
dayan@ai.mit. edu 
Abstract 
The wake-sleep algorithm (Hinton, Dayan, Frey and Neal 1995) is a rel- 
atively efficient method of fitting a multilayer stochastic generative 
model to high-dimensional data. In addition to the top-down connec- 
tions in the generafive model, it makes use of bottom-up connections for 
approximating the probability distribution over the hidden units given 
the data, and it trains these bottom-up connections using a simple delta 
rule. We use a variety of synthetic and real data sets to compare the per- 
formance of the wake-sleep algorithm with Monte Carlo and mean field 
methods for fitting the same generative model and also compare it with 
other models that are less powerful but easier to fit. 
1 INTRODUCTION 
Neural networks are often used as bottom-up recognition devices that transform input vec- 
tors into representations of those vectors in one or more hidden layers. But multilayer net- 
works of stochastic neurons can also be used as top-down generafive models that produce 
patterns with complicated correlational structure in the bottom visible layer. In this paper 
we consider generafive models composed of layers of stochastic binary logistic units. 
Given a generafive model parameterized by top-down weights, there is an obvious way to 
perform unsupervised learning. The generative weights are adjusted to maximize the prob- 
ability that the visible vectors generated by the model would match the observed data. 
Unfortunately, to compute the derivatives of the log probability of a visible vector, d, with 
respect to the generafive weights, t3, it is necessary to consider all possible ways in which 
d could be generated. For each possible binary representation c in the hidden units the 
derivative needs to be weighted by the posterior probability of c given d and 13: 
P(old, o) = P(olO)P(dlo, 13)/Z P�I13)P(dlI, 
(1) 
662 B.J. FREY, G. E. HINTON, P. DAYAN 
It is intractable to compute P(c[ d, 0), so instead of minimizing -logP(d[ 0), we minimize 
an easily computed upper bound on this quantity that depends on some additional parame- 
ters, 
-logP(d[0) < F(dl0, 0p) = - Q(cqd, 0))logP(c, dl0 ) + Q(o[d, 0))logQ(c[d, 0)). (2) 
F(d I 0, 0)) is a Helmholtz free energy and is equal to -logP(d10 ) when the distribution 
Q(ol d, q) is the same as the posterior distribution P(ol d, 0). Otherwise, F(dlO , 0)) 
exceeds -logP(d I 0) by the asymmetric divergence: 
D = Q(cld, 0))log (Q(cld, 0p)/P(cld, 0)). (3) 
We restrict Q(o I d, q) to be a product distribution within each layer that is conditional on 
the binary states in the layer below and we can therefore compute it efficiently using a bot- 
tom-up recognition network. We call a model that uses bottom-up connections to mini- 
mize the bound in equation 2 in this way a Helmholtz machine (Dayan, Hinton, Neal and 
Zemel 1995). The recognition weights 0) take the binary activities in one layer and sto- 
chastically produce binary activities in the layer above using a logistic function. So, for a 
given visible vector, the recognition weights may produce many different representations 
in the hidden layers, but we can get an unbiased sample from the distribution Q(o I d, 0)) in 
a single bottom-up pass through the recognition network. 
The highly restricted form of Q(� I d, means that even if we use the optimal recognition 
weights, the gap between F(d10, q) and -logP(d10 ) is large for some generarive models. 
However, when F(d I O, ) is minimized with respect to the generafive weights, these mod- 
els will generally be avoided. 
F(d I O, 0)) can be viewed as the expected number of bits required to communicate a visible 
vector to a receiver. First we use the recognition model to get a sample from the distribu- 
tion Q(o I d, q). Then, starting at the top layer, we communicate the activities in each layer 
using the top-down expectations generated from the already communicated activities in 
the layer above. It can be shown that the number of bits required for communicating the 
state of each binary unit is sklog(qk/pO + (1 -st,)log[(1-qt,)/(1-Pt,)], where pt` is the 
top-down probability that st` is on and qt` is the bottom-up probability that st` is on. 
There is a very simple on-line algorithm that minimizes F(d[ O, 0)) with respect to the gen- 
erative weights. We simply use the recognition network to generate a sample from the dis- 
tribution Q(o I d, and then we increment each top-down weight 0t`j by est` (9-PJ), where 
0t`j connects unit k to unit j. It is much more difficult to exactly follow the gradient of 
F(d I O, 0)) with respect to the recognition weights, but there is a simple approximate 
method (Hinton, Dayan, Frey and Neal 1995). We generate a stochastic sample from the 
generative model and then we increment each bottom-up weight O)i j by esi( - c) to 
increase the log probability that the recognition weights would produce the correct activi- 
ties in the layer above. This way of fitting a Helmholtz machine is called the wake-sleep 
algorithm and the purpose of this paper is to assess how effective it is at performing high- 
dimensional density estimation on a variety of synthetically constructed data sets and two 
real-world ones. We compare it with other methods of fitting the same type of generafive 
model and also with simpler models for which there are efficient fitting algorithms. 
2 COMPETITORS 
We compare the wake-sleep algorithm with six other density estimation methods. All data 
units are binary and can take on values d/ = 1 (on) and d/ = 0 (off). 
Gzip. Gzip (Gailly, 1993) is a practical compression method based on Lempel-Ziv coding. 
This sequential data compression technique encodes future segments of data by transmit- 
Does the Wake-sleep Algorithm Produce Good Density Estimators? 663 
ting codewords that consist of a pointer into a buffer of recent past output together with 
the length of the segment being coded. Gzip's performance is measured by subtracting the 
length of the compressed training set from the length of the compressed training set plus a 
subset of the test set. Taking all disjoint test subsets into account gives an overall test set 
code cost. Since we are interested in estimating the expected performance on one test case, 
to get a fight lower bound on gzip's performance, the subset size should be kept as small 
as possible in order to prevent gzip from using early test data to compress later test data. 
Base Rate Model. Each visible unit k is assumed to be independent of the others with a 
probability p/c of being on. The probability of vector d is p(d) = I-I k pk ( 1 - p)- d . The 
arithmetic mean of unit k's activity is used to estimate P/c, except in order to avoid serious 
overfitting, one extra on and one extra off case are included in the estimate. 
Binary Mixture Model. This method is a hierarchical extension of the base rate model 
which uses more than one set of base rates. Each set is called a component. Component j 
has probability nj and awards each visible unit k a probability pj/c of being on. The net 
probability of d is p(d) = i ni I-I, Pi? ( 1 - piO 1-cO, . For a given training datum, we con- 
sider the component identit'y to be h missin value which must be filled in before the 
parameters can be adjusted. To accomplish this, we use the expectation maximization 
algorithm (Dempster, Laird and Rubin 1977) to maximize the log-likelihood of the train- 
ing set, using the same method as above to avoid serious overfitting. 
Gibbs Machine (GM). This machine uses the same generative model as the Helmholtz 
machine, but employs a Monte Carlo method called Gibbs sampling to find the posterior 
in equation 1 (Neal, 1992). Unlike the Helmholtz machine it does not require a separate 
recognition model and with sufficiently prolonged sampling it inverts the generative 
model perfectly. Each hidden unit is sampled in fixed order from a probability distribution 
conditional on the states of the other hidden and visible units. To reduce the time required 
to approach equilibrium, the network is annealed during sampling. 
Mean Field Method (MF). Instead of using a separate recognition model to approximate 
the posterior in equation 1, we can assume that the distribution over hidden units is facto- 
ffal for a given visible vector. Obtaining a good approximation to the posterior is then a 
matter of minimizing free energy with respect to the mean activities. In our experiments, 
we use the on-line mean field learning algorithm due to Saul, Jaakkola, and Jordan (1996). 
Fully Visible Belief Network (FVBN). This method is a special case of the Helmholtz 
machine where the top-down network is fully connected and there are no hidden units. No 
recognition model is needed since there is no posterior to be approximated. 
3 DATA SETS 
The performances of these methods were compared on five synthetic data sets and two 
real ones. The synthetic data sets had matched complexities: the generative models that 
produced them had 100 visible units and between 1000 and 2500 parameters. A data set 
with 100,000 examples was generated from each model and then partitioned into 10,000 
for training, 10,000 for validation and 80,000 for testing. For tractable cases, each data set 
entropy was approximated by the negative log-likelihood of the training set under its gen- 
erative model. These entropies are approximate lower bounds on the performance. 
The first synthetic data set was generated by a mixture model with 20 components. Each 
component is a vector of 100 base rates for the 100 visible units. To make the data more 
realistic, we arr
