Training Knowledge-Based Neural Networks to 
Recognize Genes in DNA Sequences 
Michiel O. Noordewier 
Computer Science 
lutgers University 
New Brunswick, NJ 08903 
GeofFrey G. Towell 
Computer Sciences 
University of Wisconsin 
Madison, WI 53706 
Abstract 
Jude W. Shavlik 
Computer Sciences 
University of Wisconsin 
Madison, WI 53706 
We describe the application of a hybrid symbolic/connectionist machine 
learning algorithm to the task of recognizing important genetic sequences. 
The symbolic portion of the KBANN system utilizes inference rules that 
provide a roughly-correct method for recognizing a class of DNA sequences 
known as eukar!]otic splice-junctions. We then map this domain theory 
into a neural network and provide training examples. Using the samples, 
the neural network's learning algorithm adjusts the domain theory so that 
it properly classifies these DNA sequences. Our procedure constitutes 
a general method for incorporating preexisting knowledge into artificial 
neural networks. We present an experiment in molecular genetics that 
demonstrates the value of doing so. 
Introduction 
Often one has some preconceived notions about how to perform some classifica- 
tion task. It would be useful to incorporate this knowledge into a neural net- 
work, and then use some training examples to refine these approximately-correct 
rules of thumb. This paper describes the KBANN (Knowledge-Based Artificial New- 
ral Networks) hybrid learning system and demonstrates its ability to learn in the 
complex domain of molecular genetics. Briefly, KANN uses a knowledge base of 
hierarchically-structured rules (which may be both incomplete and incorrect) to 
form an artificial neural network (ANN). In so doing, KBANN makes it possible to 
apply neural learning techniques to the empirical improvement of knowledge bases. 
The task to be learned is the recognition of certain DNA (deoxyribonucleic acid) 
subsequences important in the expression of genes. A large governmental research 
530 
Training Knowledge-Based Neural Networks to Recognize Genes 531 
 DNA 
precursor mRNA 
mRNA (after splicing) 
protein 
folded protein 
Figure 1: Steps in the Expression of Genes 
program, called the Human Genome Initiative, has recently been undertaken to 
determine the sequence of DNA in humans, estimated to be 3 x 10 9 characters of 
information. This provides a strong impetus to develop genetic-analysis techniques 
based solely on the information contained in the sequence, rather than in com- 
bination with other chemical, physical, or genetic techniques. DNA contains the 
information by which a cell constructs protein molecules. The cellular expression 
of proteins proceeds by the creation of a message ribonucleic acid (mINA) copy 
from the DNA template (Figure 1). This mPNA is then translated into a protein. 
One of the most unexpected findings in molecular biology is that large pieces of the 
mPNA are removed before it is translated further [1]. 
The utilized sequences (represented by boxes in Figure 1) are known as exons, 
while the removed sequences are known as introns, or intervening sequences. 
Since the discovery of such split genes over a decade ago, the nature of the 
splicing event has been the subject of intense research. The points at which DNA 
is removed (the boundaries of the boxes in Figure 1) are known as splice-jmctions. 
The splice-junctions of eukaryotic 1 mPNA precursors contain patterns similar to 
those in Figure 2. 
exon 
ï¿½ .. (A/C)A GI I GT (A/G) 
intron exon 
A G T ... (C/T) 6 X (C/T) A G l[ G (G/T) ... 
Figure 2: Canonical Splice-Junctions 
DNA is represented by a string of characters from the set {A,G,C,T}. 
In this figure, X represents any character, slashes represent disjunctive 
options, and subscripts indicate repetitions of a pattern. 
However, numerous other locations can resemble these canonical patterns. As a 
result, these patterns do not by themselves reliably imply the presence of a splice- 
junction. Evidently, if junctions are to be recognized on the basis of sequence 
information alone, longer-range sequence information will have to be included in 
Eukaryotic cells contain nuclei, unlike prokaryotic cells such as bacterial and viruses. 
532 Noordewier, Towell, and Shavlik 
the decision-making criteria. A central problem is therefore to determine the extent 
to which sequences surrounding splice-junctions differ from sequences surrounding 
spurious analogues. 
We have recently described a method [9, 12] that combines empirical and sym- 
bolic learning algorithms to recognize another class of genetic sequences known as 
bacterial promoters. Our hybrid KBXNN system was demonstrated to be superior 
to other empirical learning systems including decision trees and nearest-neighbor 
algorithms. In addition, it was shown to more accurately classify promoters than 
the methods currently reported in the biological literature. In this manuscript we 
describe the application of KBXNN tO the recognition of splice-junctions, and show 
that it significantly increases generalization ability when compared to randomly- 
initialized, single-hidden-layer networks (i.e., networks configured in the usual 
way). The paper concludes with a discussion of related research and the areas 
which our research is currently pursuing. 
2 The KBANN Algorithm 
KBANN uses a knowledge base of domain-specific inference rules in the form of 
PROLOa-like clauses to define what is initially known about a topic. The knowledge 
base need be neither complete nor correct; it need only support approximately 
correct reasoning. KBArqrq translates knowledge bases into ANNs in which units 
and links correspond to parts of knowledge bases. A detailed explanation of the 
procedure used by KB.rqrq to translate rules into an ANN can be found in [12]. 
As an example of the K.rqN method, consider the artificial knowledge base in 
Figure 3a which defines membership in category A. Figure 3b represents the hi- 
erarchical structure of these rules: solid and dotted lines represent necessary and 
prohibitory dependencies, respectively. Figure 3c represents the ANN that results 
from the translation into a neural network of this knowledge base. Units X and Y in 
Figure 3c are introduced into the ANN to handle the disjunction in the knowledge 
base. Otherwise, units in the ANN correspond to consequents or antecedents in 
the knowledge base. The thick lines in Figure 3c represent the links in the ANN 
that correspond to dependencies in the explanation. The weight on thick solid lines 
is 3, while the weight on thick dotted lines is -3. The lighter solid lines represent 
the links added to the network to allow refinement of the initial rules. At present, 
KBANN is restricted to non-recursive, propositional (i.e., variable-free) sets of rules. 
Numbers beside the unit names in Figure 3c are the biases of the units. These 
biases are set so that the unit is active if and only if the corresponding consequent 
in the knowledge base is true. 
As this example illustrates, the use of KBArqrq to initialize ANNs has two principle 
benefits. First, it indicates the features believed to be important to an example's 
classification. Second, it specifies important derived features; through their deduc- 
tion the complexity of an ANN's final decision is reduced. 
Training Knowledge-Based Neural Networks to Recognize Genes 533 
A :-B,C. 
B :- not F, G. 
B :- not H. 
C :-I,J. 
Figure 3: Translation of a Knowledge Base into an ANN 
3 Problem Definition 
The splice-junction problem is to determine into which of the following three cate- 
gories a specified location in a DNA sequence falls: (1) exon/intron borders, referred 
to as aonors, (2) intron/exon borders, referrea to as acceptors, ana (3) neither. To 
address this problem we provide KBx with two sets of information: a set of DNA 
sequences 60 nucleotides long that are classified as to the category membership of 
their center and a domain theory that describes when the center of a sequence 
corresponds to one of these three categories. 
Table 1 contains the initial domain theory used in the splice-junction recognition 
task. A special notation is used to specify locations in the DNA sequence. When a 
rule's antecedents refer to input features, they first state a relative location in the 
sequence vector, then the DNA symbol that must occur (e.g., @3=A). Positions 
are numbered negatively or positively depending on whether they occur before or 
after the possible junction location. By biological convention, position numbers of 
zero are not used. The set of rules was derived in a straightforward fashion from 
the biological literature [13]. Briefly, these rules state that a donor or acceptor 
sequence is present if characters from the canonical sequence (Figure 2) are present 
and triplets known as stop codons are absent in the appropriate positions. 
The examples were obtained by taking the documented split genes from all primate 
gene entries in Genbank release 64.1 [?] that are described as complete. Each 
training example consists of a window that covers 30 nucleotides before and after 
each donor and acceptor site. This procedure resulted in 751 examples of acceptor 
and 745 examples of donors. Negative examples are derived from similarly-sized 
windows, which did not cross an intron/exon boundary, sampled at random from 
these sequences. Note that this differs from the usual practice of generating ran- 
dom sequences with base-frequency composition the same as the positive instances. 
However, we feel that this provides a more realistic training set, since DNA is known 
to be highly non-random [3]. Although many more negative examples were avail- 
able, we used approximately as many negative examples are there were both donor 
and acceptors. Thus, the total data set we used had 3190 examples. 
The network created by KBx for the splice-junction problem has one output 
534 Noordewier
