Harmonic Grammars 
for Formal Languages 
Paul Smolensky 
Department of Computer Science 
Institute of Cognitive Science 
University of Colorado 
Boulder, Colorado 80309-0430 
Abstract 
Basic connectionist principles imply that gramxnars should take the 
form of systems of parallel soft constraints defining an optimization 
problem the solutions to which are the well-formed structures in 
the language. Such Harmonic Grammars have been successfully 
applied to a number of problems in the theory of natural languages. 
IIere it is shown that formal languages too can be specified by 
Harmonic Grammars, rather than by conventional serial re-write 
rule systems. 
I HARMONIC GRAMMARS 
In collaboration with Gdraldine Legendre, Yoshiro Miyata, and Alan Prince, I have 
been studying how symbolic computation in human cognition can arise naturally 
as a higher-level virtual machine realized in appropriately designed lower-level con- 
nectionist networks. The basic computational principles of the approach are these: 
(1) 
a. When analyzed at the lower level, mental representations are dis- 
tributed patterns of connectionist activity; when analyzed at a higher 
level, these same representations constitute symbolic structures. The 
particular symbolic structure s is characterized as a set of filler/role 
bindings {i/ri), using a collection of structural roles {ri} each of 
which may be occupied by a filler :fi--a constituent symbolic struc- 
847 
848 Smolensky 
Co 
ture. The corresponding lower-level description is an activity vector 
s = ifiï¿½ri' These tensor product representations can be defined 
recursively: fillers which are themselves complex structures are rep- 
resented by vectors which in turn are recursively defined as tensor 
product representations. (Smolensky, 1987; Smolensky, 1990). 
When analyzed at the lower level, mental processes are massively par- 
allel numerical activation spreading; when analyzed at a higher level, 
these same processes constitute a form of symbol manipulation in which 
entire structures, possibly involving recursive embedding, are manipu- 
lated in parallel. (Dolan and Smolensky, 1989; Legendre et al., 1991a; 
Smolensky, 1990). 
When the lower-level description of the activation spreading processes 
satisfies certain mathematical properties, this process can be analyzed 
on a higher level as the construction of that symbolic structure includ- 
ing the given input structure which maximizes Harmony (equivalently, 
minimizes 'energy'. The IIarmony can be computed either at the lower 
level as a particular mathematical function of the numbers conaprising 
the activation pattern, or at the higher level as a function of the sym- 
bolic constituents comprising the structure. In the simplest cases, the 
core of the tIarmony function can be written at the lower, connec- 
tionist level simply as the quadratic form H = aTWa, where a is the 
network's activation vector and W its connection weight matrix. At 
the higher level, H = c,c Hc; c; each Hc; c is the Harmony of hav- 
ing the two symbolic constituents c and c2 in the same structure (the 
ci are constituents in particular structural roles, and may be the same). 
(Cohen and Grossberg, 1983; Golden, 1986; GoldenD 1988; Hinton and 
Sejnowski, 1983; Hinton and Sejnowski, 1986; Hopfield, 1982; Hop- 
field, 1984; IIopfield, 1987; Legendre et al., 1990a; Smolensky, 1983; 
Smolensky, 1986). 
Once Itarmony (connectionist well-formedness) is identified with grammaticality 
(linguistic well-formedness), the following results (lc) (Legendre et al., 1990a): 
(2) 
a. The explicit form of the Harmony function can be computed to be a 
sum of terms each of which measures the well-formedness arising from 
the coexistence, within a single structure, of a pair of constituents in 
their particular structural roles. 
b. A (descriptive) grammar can thus be identified as a set of soft rules 
each of the form: 
If a linguistic structure $ simultaneously contains constituent c 
in structural role r and constituent c2 in structural role r2, then 
add to H($), the Harmony value of $, the quantity 
(which may be positive or negative). 
A set of such soft rules (or constraints, or preferences) defines a 
Harmonic Grammar. 
c. The constituents in the soft rules include both those that are given 
in the input and the hidden constituents that are assigned to the 
input by the grammar. The problem for the parser (computational 
Harmonic Grammars for Formal Languages 849 
grainmar) is to construct that structure $, containing both input and 
hidden constituents, with the highest overall Harmony H(S). 
Harmonic Grainmar (IIG) is a formal developlnent of conceptual ideas linking Iiar- 
mony to linguistics which were first proposed in Lakoff's cognitive phonology (Lakoff, 
1988; Lakoff, 1989) and Goldsmith's harmonic phonology (Goldsmith, 1990; Gold- 
smith, in press). For an application of HG to natural language syntax/semantics, 
see (Legendre et al., 1990a; Legendre et al., 1990b; Legendre et al., 1991b; Legendre 
et al., in press). IIarmonic Grammar has more recently evolved into a non-numerical 
formalism called Optimality Theory which has been successfully applied to a range 
of problems in phonology (Prince and Smolensky, 1991; Prince and Smolensky, in 
preparation). For a comprehensive discussion of the overall research program see 
(Smolensky et al., 1992). 
2 HGs FOR FORMAL LANGUAGES 
One means for assessing the expressive power of Harxnonic Grammar is to apply 
it to the specification of formal languages. Can, e.g., any Context-Free Language 
(CFL) L be specified by an ItG? Can a set of soft rules of the form (2b) be given 
so that a string s  L iff the maximum-Harmony tree with s as terminals has, say, 
H >_ 07 A crucial limitation of these soft rules is that each may only refer to a 
pair of constituents: in this sense, they are only second order. (It simplifies the 
exposition to describe as pairs those in which both constituents are the same; 
these actually correspond to first order soft rules, which also exist in tIG.) 
For a CFL, a tree is well-formed iff all of its local trees arewhere a local tree is 
just some node and all its children. Thus the HG rules need only refer to pairs of 
nodes which fall in a single local tree, i.e., parent-child pairs and/or sibling pairs. 
The H value of the entire tree is just the sum of all the numbers for each such pair 
of nodes given by the soft rules defining the IIG. 
It is clear that for a general context-free grammar (CFG), pairwise evalu- 
ation doesn't suffice. Consider, e.g., the following CFG fragment, Go ' 
A-.B C, A--D E, F--B E, and the ill-formed local tree (A ; (B E)) (here, 
A is the parent, B and E the two children). Pairwise well-formedness checks fail 
to detect the ill-formedness, since the first rule says B can be a left child of A, 
the second that E can be a right child of A, and the third that B can be a left 
sibling of E. The ill-formedness can be detected only by examining all three nodes 
simultaneously, and seeing that this triple is not licensed by any single rule. 
One possible approach would be to extend HG to rules higher than second order, 
involving more than two constituents; this corresponds to H functions of degree 
higher than 2. Such H functions go beyond standard connectionist networks with 
pairwise connectivity, requiring networks defined over hypergraphs rather than or- 
dinary graphs. There is a natural alternative, however, that requires no change at 
all in ItG, but instead adopts a special kind of grammar for the CFL. The basic 
trick is a modification of an idea taken from Generalized Phrase Structure Grammar 
(Gazdar et al., 1985), a theory that adapts CFGs to the study of natural languages. 
It is useful to introduce a new normal form for CFGs, Harmonic Normal Form 
850 Smolensky 
(HNF). In HNF, all rules of are three types: A[i]---B C, A-.a, and A---A[i]; and 
there is the further requirement that there can be only one branching rule with a 
given left hand side--the unique branching condition. Here we use lowercase letters 
to denote ternfinal symbols, and have two sorts of non-terminals: general symbols 
like A and subcategorized symbols like A[1],A[2], ...,A[i]. To see that every CFL L 
does indeed have an HNF grammar, it suffices to first take a CFG for L in Chomsky 
Normal Form, and, for each (necessarily binary) branching rule AB C, (i) replace 
the symbol A on the left hand side with A[i], using a different value of i for each 
branching rule with a given left hand side, and (ii) add the rule A--.A[i]. 
Subcategorizing the general category A, which may have several legal branching 
expansions, into the specialized subcategories A[i], each of which has only one legal 
branching expansion, makes it possible to determine the well-formedness of an entire 
tree simply by examining each parent/child pair separately: an entire tree is well- 
formed iff every parent/child pair is. The unique branching condition enables us 
to evaluate the Harmony of a tree simply by adding up a collection of numbers 
(specified by the soft rules of an IIG), one for each node and one for each link of 
the tree. Now, any CFL L can be specified by a Harmonic Grammar. First, find an 
HNF grammar GH:W' for L; from it, generate a set of soft rules defining a Harmonic 
Grammar G via the correspondences: 
GHNF GH 
A[i] 
start symbol $ 
A---e (ct = a or A[i]) 
A[il--B C' 
Ra: If a is at any node, add -1 to H 
RA: If A is at any node, add -2 to H 
Ratq: If A[i] is at any node, add -3 to H 
R,.oot: If S is at the root, add +1 to H 
If a is a left child of A, add +2 to H 
If B is a left child of A[i], add +2 to H 
If C' is a right child of A[i], add +2 to H 
The soft rules Ra, RA, RA[i] and R,.oot are first-order and evaluate tree nodes; the 
remaining second-order soft rules are legal domination rules evaluating tree links. 
This IIG assigns H = 0 to any legal parse tre
