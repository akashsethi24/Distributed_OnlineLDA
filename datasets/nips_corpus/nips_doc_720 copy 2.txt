Fast Pruning Using Principal 
Components 
Asriel U. Levin Todd K. Leen and John E. Moody 
Department of Computer Science and Engineering 
Oregon Graduate Institute 
P.O. Box 91000 
Portland, OR 97291-1000 
Abstract 
We present a new algorithm for eliminating excess parameters and 
improving network generalization after supervised training. The 
method, Principal Cmnponents Pruning (PCP), is based on prin- 
cipal component analysis of the node activations of successive layers 
of the network. It is simple, cheap to implement, and effective. It 
requires no network retraining, and does not involve calculating 
the full Hessian of the cost function. Only the weight and the node 
activity correlation matrices for each layer of nodes are required. 
We demonstrate the efficacy of the method on a regression problem 
using polynomial basis functions, and on an economic time series 
prediction problem using a two-layer, feedforward network. 
I Introduction 
In supervised learning, a network is presented with a set of training exemplars 
[u(k),y(k)], k = 1... N where u(k) is the ktn input and y(k) is the correspond- 
ing output. The assumption is that there exists an underlying (possibly noisy) 
functional relationship relating the outputs to the inputs 
y- f(u,e) 
where e denotes the noise. The aim of the learning process is to approximate this 
relationship based on the the training set. The success of the learned approximation 
36 Levin, Leen, and Moody 
is judged by the ability of the network to approximate the outputs corresponding 
to inputs it was not trained on. 
Large networks have more functional flexibility than small networks, so are better 
able to fit the training data. However large networks can have higher parameter 
variance than small networks, resulting in poor generalization. The number of 
parameters in a network is a crucial factor in it's ability to generalize. 
No practical method exists for determining, a priori, the proper network size and 
connectivity. A promising approach is to start with a large, fully-connected network 
and through pruning or regularization, increase model bias in order to reduce model 
variance and improve generalization. 
Review of existing algorithms 
In recent years, several methods have been proposed. Skeletonization (Mozer and 
Smolensky, 1989) removes the neurons that have the least effect on the output 
error. This is costly and does not take into account correlations between the neuron 
activities. Eliminating small weights does not properly account for a weight's effect 
on the output error. Optimal Brain Damage (OBD) (Le Cun et al., 1990) removes 
those weights that least affect the training error based on a diagonal approximation 
of the Hessian. The diagonal assumption is inaccurate and can lead to the removal 
of the wrong weights. The method also requires retraining the pruned network, 
which is computationally expensive. Optimal Brain Surgeon (OBS) (Hassibi et al., 
1992) removes the diagonal assumption but is impractical for large nets. Early 
stopping monitors the error on a validation set and halts learning when this error 
starts to increase. There is no guarantee that the learning curve passes through the 
optimal point, and the final weight is sensitive to the learning dynamics. Weight 
decay (ridge regression) adds a term to the objective function that penalizes large 
weights. The proper coefficient for this term is not known a priori, so one must 
perform several optimizations with different values, a cumbersome process. 
We propose a new method for eliminating excess parameters and improving network 
generalization. The method, Principal Components Pruning (PCP), is based on 
principal component analysis (PCA) and is simple, cheap and effective. 
2 Background and Motivation 
PCA (Jolliffe, 1986) is a basic tool to reduce dimension by eliminating redundant 
variables. In this procedure one transforms variables to a basis in which the covari- 
ance is diagonal and then projects out the low variance directions. 
While application of PCA to remove input variables is useful in some cases (Leen 
et al., 1990), there is no guarantee that low variance variables have little effect on 
error. We propose a saliency measure, based on PCA, that identifies those variables 
that have the least effect on error. Our proposed Principal Components Pruning 
algorithm applies this measure to obtain a simple and cheap pruning technique in 
the context of supervised learning. 
Fast Pruning Using Principal Components 37 
Special Case: PCP in Linear Regression 
In unbiased linear models, one can bound the bias introduced from pruning the 
principal degrees of freedom in the model. We assume that the observed system 
is described by a signal-plus-noise model with the signal generated by a function 
linear in the weights: 
y = Wou+e 
, W  ,xp, and e is a zero mean additive noise. The 
where u  P, y   
regression model is 
The input correlation matrix is E = - Y-k u(k)uT(k) � 
It is convenient to define coordinates in which E is diagonal A -- C T E C where C is 
the matrix whose columns are the orthonormal eigenvectors of E. The transformed 
input variables and weights are  - Cru and  = W C respectively, and the 
model output can be rewritten as  =   
It is straightforward to bound the increase in trning set error resulting from re- 
moving subsets of the transformed input variable. The sum squared error is 
1 
   [y() _ ()]r[y() _ ()1 
k 
Let t (k) denote the model's output when the last p - 1 components of (k) are set 
to zero. By the triangle inequality 
 [y() _ ()]r[y() _ ()] 
k 
1 
  +  [()_ ()]r[()_ ()] () 
k 
The second term in (1) bounds the increase in the training set error 1. This term 
can be rewritten as 
p 
- - = 
N 
k i=/+1 
where i denotes the i * column of  and Ai is the i * eigenvalue. The quantity 
i Ai measures the effect of the i t eigen-coordinate on the output error; it serves 
as our saliency measure for the weight i. 
Relying on Aike's Final Prediction error (FPE) (Aike, 1970), the average test 
set error for the original model is given by 
N 
where pm is the number of parameters in the model. If p - 1 principal components 
are removed, then the expected test set is given by 
N+Im 
Jt[W] = N - l t(W) 
1For y  R 1 , the inequality is replaced by an equality. 
38 Levin, Leen, and Moody 
If we assume that N >> ! � m, the last equation implies that the optimal generaliza- 
tion will be achieved if all principal components for which 
2mI 
N 
are removed. For these eigen-coordinates the reduction in model variance will more 
then compensate for the increase in training error, leaving a lower expected test set 
error. 
3 Proposed algorithm 
The pruning algorithm for linear regression described in the previous section can be 
extended to multilayer neural networks. A complete analysis of the effects on gen- 
eralization performance of removing eigen-nodes in a nonlinear network is beyond 
the scope of this short paper. However, it can be shown that removing eigen-nodes 
with low saliency reduces the effective number of parameters (Moody, 1992) and 
should usually improve generalization. Also, as will be discussed in the next section, 
our PCP algorithm is related to the OBD and OBS pruning methods. As with all 
pruning techniques and analyses of generalization, one must assume that the data 
are drawn from a stationary distribution, so that the training set fairly represents 
the distribution of data one can expect in the future. 
Consider now a feedforward neural network, where each layer is of the form 
yi = r[w'u'] = r[x'] 
Here, u i is the input, x  is the weighted sum of the input, F is a diagonal operator 
consisting of the activation function of the neurons at the layer, and y is the output 
of the layer. 
1. A network is trained using a supervised (e.g. backpropagation) training 
procedure. 
2. Starting at the first layer, the correlation matrix E for the input vector to 
the layer is calculated. 
3. Principal components are ranked by their effect on the linear output of the 
layer. 2 
4. The effect of removing an eigennode is evaluated using a validation set. 
Those that do not increase the validation error are deleted. 
5. The weights of the layer are projected onto the 1 dimensional subspace 
spanned by the significant eigenvectors 
W --> W C C 
where the columns of C are the eigenvectors of the correlation matrix. 
6. The procedure continues until all layers are pruned. 
2If we assume that --F is the sigmoidal operator, relying on its contraction property, 
we have that the resulting output error is bounded by [le[[ <- [[W[[[[e[[ where el is 
error observed at xi and IlWll is the norm of the matrices connecting it to the output. 
Fast Pruning Using Principal Components 39 
As seen, the algorithm proposed is easy and fast to implement. The matrix dimen- 
sions are determined by the number of neurons in a layer and hence are manageable 
even for very large networks. No retraining is required after pruning and the speed 
of running the network after pruning is not affected. 
Note: A finer scale approach to pruning should be used if there is a large variation 
between Sij for different j. In this case, rather than examine 5Tsii in one piece, 
the contribution of each 5ji could be examined individually and those weights 
for which the contribution is small can be deleted. 
4 Relation to Hessian-Based Methods 
The effect of our PCP method is to reduce the rank of each layer of weights in a 
network by the removal of the least salient eigen-nodes, which reduces the effective 
number of parameters (Moody, 1992). This is in contrast to the OBD and OBS 
methods which reduce the rank by eliminating actual weights. PCP differs further 
from OBD and OBS in that it does not require that the network be trained to a 
local minimum of the error. 
In spite of these basic difference
