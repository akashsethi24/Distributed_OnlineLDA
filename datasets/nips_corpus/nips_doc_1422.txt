RCC Cannot Compute Certain FSA, 
Even with Arbitrary Transfer Functions 
Mark Ring 
RWCP Theoretical Foundation GMD Laboratory 
GMD -- German National Research Center for Information Technology 
Schloss Birlinghoven 
D-53 754 Sankt Augustin, Germany 
email: Mark.Ring(GMD.de 
Abstract 
Existing proofs demonstrating the computational limitations of Re- 
current Cascade Correlation and similar networks (Fahlman, 1991; 
Bachtach, 1988; Mozer, 1988) explicitly limit their results to units 
having sigmoidal or hard-threshold transfer functions (Giles et al., 
1995; and Kremer, 1996). The proof given here shows that for 
any finite, discrete transfer function used by the units of an RCC 
network, there are finite-state automata (FSA) that the network 
cannot model, no matter how many units are used. The proof also 
applies to continuous transfer functions with a finite number of 
fixed-points, such as sigmoid and radial-basis functions. 
1 Introduction 
The Recurrent Cascade Correlation (RCC) network was proposed by Fahlman 
(1991) to offer a fast and efficient alternative to fully connected recurrent networks. 
The network is arranged such that each unit has only a single recurrent connection: 
the connection that goes from itself to itself. Networks with the same structure 
have been proposed by Mozer (Mozer, 1988) and Bachrach (Bachrach, 1988). This 
structure is intended to allow simplified training of recurrent networks in the hopes 
of making them computationally feasible. However, this increase in efficiency comes 
at the cost of computational power: the networks' computational capabilities are 
limited regardless of the power of their activation functions. The remaining input to 
each unit consists of the input to the network as a whole together with the outputs 
from all units lower in the RCC network. Since it is the structure of the network 
and not the learning algorithm that is of interest here, only the structure will be 
described in detail. 
620 M. Ring 
Figure 1: This finite-state automaton was shown by Giles et al. (1995) to be un- 
representable by an RCC network whose units have hard-threshold or sigmoidal 
transfer functions. The arcs are labeled with transition labels of the FSA which 
are given as input to the RCC network. The nodes are labeled with the output 
values that the network is required to generate. The node with an inner circle is an 
accepting or halting state. 
1 
1 
Figure 2' This finite-state automaton is one of those shown by Kremer (1996) not to 
be representable by an RCC network whose units have a hard-threshold or sigmoidal 
transfer function. This FSA computes the parity of the inputs seen so far. 
The functionality of a network of N RCC units, U0, ..., U2v- can be described in 
the following way: 
Vo(t) = f0('(/), Vo(t- 1)) (1) 
Vx(t) - fx('(t), V(t - 1), V_(t), V_a(t),..., Vo(t)), (2) 
where V(t) is the output value of Ux at time step t, and '(t) is the input to the 
network at time step t. The value of each unit is determined from: (1) the network 
input at the current time step, (2) its own value at the previous time step, and (3) 
the output values of the units lower in the network at the current time step. Since 
learning is not being considered here, the weights are assumed to be constant. 
2 Existing Proofs 
The proof of Giles, et al (1995) showed that an RCC network whose units had a 
hard-threshold or sigmoidal transfer function cannot produce outputs that oscillate 
with a period greater than two when the network input is constant. (An oscillation 
has a period of x if it repeats itself every x steps.) Thus, the FSA shown in Figure 1 
cannot be modeled by such an RCC network, since its output (shown as node labels) 
oscillates at a period greater than two given constant input. Kremer (1996) refined 
the class of FSA representable by an RCC network showing that, if the input to 
the net oscillates with period p, then the output can only oscillate with a period of 
w, where w is one of p's factors (or of 2p's factors if p is odd). An unrepresentable 
example, therefore, is the parity FSA shown in Figure 2, whose output has a period 
of four given the following input (of period two): 0, 1, 0, 1, .... 
Both proofs, that by Giles et al. and that by Kremer, are explicitly designed with 
RCC Cannot Compute Certain FSA, Even with Arbitrary Transfer Functions 621 
:O,k 
$:0,1 
1 
1 2 
k 
k 
/ 
/ 
/ I 
I I 
I / 
\ / 
/ 
2,3 
Figure 3: This finite-state automaton cannot be modeled with any RCC network 
whose units are capable of representing only k discrete outputs. The values within 
the circles are the state names and the output expected from the network. The arcs 
describe transitions from state to state, and their values represent the input given 
to the network when the transition is made. The dashed lines indicate an arbitrary 
number of further states between state 3 and state ]c which are connected in the 
same manner as states 1, 2, and 3. (All states are halting states.) 
hard-threshold and sigmoidal transfer functions in mind, and can say nothing about 
other transfer functions. In other words, these proofs do not demonstrate the lim- 
itations of the RCC-type network structure, but about the use of threshold units 
within this structure. The following proof is the first that actually demonstrates 
the limitations of the single-recurrent-link network structure. 
3 Details of the Proof 
This section proves that RCC networks are incapable even in principle of modeling 
certain kinds of FSA, regardless of the sophistication of each unit's transfer function, 
provided only that the transfer function be discrete and finite, meaning only that 
the units of the RCC network are capable of generating a fixed number, k, of distinct 
output values. (Since all functions implemented on a discrete computer fall into this 
category, this assumption is minor. Furthermore, as will be discussed in Section 4, 
the outputs of most interesting continuous transfer functions reduce to only a small 
number of distinct values.) This generalized RCC network is proven here to be 
incapable of modeling the finite-state automaton shown in Figure 3. 
622 M. Ring 
For ease of exposition, let us call any FSA of the form shown in Figure 3 an RF + 
for Ring FSA with k + 1 states.Further, call a unit whose output can be any of 
k distinct values and whose input includes its own previous output, a DRU  for 
Discrete Recurrent Unit. These units are a generalization of the units used by RCC 
networks in that the specific transfer function is left unspecified. By proving the 
network is limited when its units are DRU 's proves the limitations of the network's 
structure regardless of the transfer function used. 
Clearly, a DRU + with a sufficiently sophisticated transfer function could by itself 
model an RF + by simply allocating one of its k + 1 output values for each of 
the k + 1 states. At each step it would receive as input the last state of the FSA 
and the next transition and could therefore compute the next state. By restricting 
the units in the least conceivable manner, i.e., by reducing the number of distinct 
output values to k, the RCC network becomes incapable of modeling any RF k+ 
regardless of how many DRU 's the network contains. This will now be proven. 
The proof is inductive and begins with the first unit in the network, which, after 
being given certain sequences of inputs, becomes incapable of distinguishing among 
any states of the FSA. The second step, the inductive step, proves that no finite 
number of such units can-assist a unit higher in the RCC network in making a 
distinction between any states of the RF +. 
Lemma 1 No DR U  whose input is the current transition of an RF + can reliably 
distinguish among any states of the RF + More specifically, at least one of the 
DR U  's k output values can be generated in all of the RF + 's k + 1 states. 
Proof.' Let us name the DRU's k distinct output values V �, V , ..., V -. The 
mapping function implemented by the DRU  can be expressed as follows: 
(V x , i) = V  , 
which indicates that when the unit's last output was V x and its current input is i, 
then its next output is V. 
Since an RF  is cyclical, the arithmetic in the following will also be cyclical (i.e., 
modular): 
x+y ifx+y<k 
x)y --_ 
x+y-k ifx+y>k 
x-y ifx>y 
x�y -- - 
x+k-y ifx<y 
whereO<x<kandO<y<k. 
Since it is impossible for the DRU  to represent each of the RF k+'s k+ 1 states with 
a distinct output value, at least two of these states must be represented ambiguously 
by the same value. That is, there are two RF +l states a and b and one DRU k 
value V a/b such that V a/b can be generated by the unit both when the FSA is in 
state a and when it is in state b. Furthermore, this value will be generated by the 
unit given an appropriate sequence of inputs. (Otherwise the value is unreachable, 
serves no purpose, and can be discarded, reducing the unit to a DRUk-.) 
Once the DRU k has generated V a/, it cannot in the next step distinguish whether 
the FSA's current state is a or b. Since the FSA could be in either state a or b, the 
next state after a b transition could be either a or b  1. That is: 
(v b) v (3) 
XThanks to Mike Mozer for suggesting this catchy name. 
RCC Cannot Compute Certain FSA, Even with Arbitrary Transfer Functions 623 
where a � b >_ b � a and k > 1. This new output value V a/�e can therefore be 
generated when the FSA is in either state a or state b  1. By repeatedly replacing 
b with b � 1 in Equation 3, all states from b to a � 1 can be shown to share output 
values with state a, i.e., V /b V / V /2 V /�, V /� all exist 
, , , .'., � 
Repeatedly substituting a � 1 and a for a and b respectively in the last paragraph 
produces values V :/y Vz, F 6 0, 1, ..., k + 1. There is, therefore, at least one value 
that can be generated by the unit in both states of every possible pair 
