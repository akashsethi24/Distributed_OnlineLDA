Oscillatory Neural Fields for 
Globally Optimal Path Planning 
Michael Letomort 
Dept. of Electrical Engineering 
University of Notre Dame 
Notre Dame, Indiana 46556 
Abstract 
A neural network solution is proposed for solving path planning problems 
faced by mobile robots. The proposed network is a two-dimensional sheet 
of neurons forming a distributed representation of the robot's workspace. 
Lateral interconnections between neurons are cooperative, so that the 
network exhibits oscillatory behaviour. These oscillations are used to gen- 
erate solutions of Bellman's dynamic programming equation in the context 
of path planning. Simulation experiments imply that these networks locate 
global optimal paths even in the presence of substantial levels of circuit 
noise. 
1 Dynamic Programming and Path Planning 
Consider a 2-DOF robot moving about in a 2-dimensional world. A robot's location 
is denoted by the real vector, p. The collection of all locations forms a set called the 
workspace. An admissible point in the workspace is any location which the robot 
may occupy. The set of all admissible points is called the free workspace. The 
free workspace's complement represents a collection of obstacles. The robot moves 
through the workspace along a path which is denoted by the parameterized curve, 
p(t). An admissible path is one which lies wholly in the robot's free workspace. 
Assume that there is an initial robot position, p0, and a desired final position, 
The robot path planning problem is to find an admissible path with p0 and p j, as 
endpoints such that some optimality criterion is satisfied. 
The path planning problem may be stated more precisely from an optimal control 
539 
540 Lemmon 
theorist's viewpoint. Treat the robot as a dynamic system which is characterized 
by a state vector, p, and a control vector, u. For the highest levels in a control 
hierarchy, it can be assumed that the robot's dynamics are modeled by the dif- 
ferential equation, ) = u. This equation says that the state velocity equals the 
applied control. To define what is meant by optimal, a performance functional is 
introduced. 
J(u) = lip(Q) - prl] 2 + c(p) utudt (1) 
where Ilxll is the norm of vector x and where the functional c(p) is unity if p lies 
in the free workspace and is infinite otherwise. This weighting functional is used 
to insure that the control does not take the robot into obstacles. Equation l's 
optimality criterion minimizes the robot's control effort while penalizing controls 
which do not satisfy the terminal constraints. 
With the preceding definitions, the optimal path planning problem states that for 
some final time, Q, find the control u(t) which minimizes the performance functional 
J(u). One very powerful method for tackling this minimization problem is to use 
dynamic programming (Bryson, 1975). According to dynamic programming, the 
optimal control, Uopt, is obtained from the gradient of an optimal return function, 
jO(p). In other words, uopt = X7J �. The optimal return functional satisfies the 
Hamilton-Jacobi-Bellman (HJB) equation. For the dynamic optimization problem 
given above, the HJB equation is easily shown to be 
OJ � ( -�(X7J�)t(zJ �) c(p) = 1 (2) 
= 0 c(p) = 
This is a first order nonlinear partial differential equation (PDE) with terminal 
(boundary) condition, J�(tf) = liP(Q)- P'I?. Once equation 2 has been solved 
for the jo, then the optimal path is determined by following the gradient of jo. 
Solutions to equation 2 must generally be obtained numerically. One solution ap- 
proach numerically integrates a full discretization of equation 2 backwards in time 
using the terminal condition, jo(Q), as the starting point. The proposed numerical 
solution is attempting to find characteristic trajectories of the nonlinear first-order 
PDE. The PDE nonlinearities, however, only insure that these characteristics exist 
locally (i.e., in an open neighborhood about the terminal condition). The resulting 
numerical solutions are, therefore, only valid in a local sense. This is reflected in 
the fact that truncation errors introduced by the discretization process will even- 
tually result in numerical solutions violating the underlying principle of optimality 
embodied by the HJB equation. 
In solving path planning problems, local solutions based on the numerical integra- 
tion of equation 2 are not acceptable due to the local nature of the resulting 
solutions. Global solutions are required and these may be obtained by solving an 
associated variational problem (Benton, 1977). Assume that the optimal return 
function at time ty is known on a closed set B. The variational solution for equa- 
tion 2 states that the optimal return at time t < ty at a point p in the neighborhood 
of the boundary set B will be given by 
J�(p,t): min {J�(y, tf)+ [[p- Yl[a} 
yes (Q -t) 
(3) 
Oscillatory Neural Fields for Globally Optimal Path Planning 541 
where Ilpll denotes the L2 norm of vector p. Equation 3 is easily generalized to 
other vector norms and only applies in regions where c(p) = 1 (i.e. the robot's free 
workspace). For obstacles, J�(p,t) = J�(p, tf) for all t < tf. In other words, the 
optimal return is unchanged in obstacles. 
2 Oscillatory Neural Fields 
The proposed neural network consists of MN neurons arranged as a 2-d sheet 
called a neural field. The neurons are put in a one-to-one correspondence with 
the ordered pairs, (i,j) where i = 1,...,N and j = 1,...,M. The ordered pair 
(i,j) will sometimes be called the (i,j)th neuron's label. Associated with the 
(i, j)th neuron is a set of neuron labels denoted by Ni,d. The neurons' whose labels 
lie in Ni,/ are called the neighbors of the (i, j)th neuron. 
The (i,j)th neuron is characterized by two states. The short term activity (STA) 
state, xi,j, is a scalar representing the neuron's activity in response to the currently 
applied stimulus. The long term activity (LTA) state, wi,j, is a scalar representing 
the neuron's average activity in response to recently applied stimuli. Each neuron 
produces an output, f(xi,j), which is a unit step function of the STA state. (i.e., 
fix) = 1 ifx > 0 and f(x) = 0 ifx _< 0). A neuron will be called active or 
inactive if its output is unity or zero, respectively. 
Each neuron is also characterized by a set of constants. These constants are either 
externally applied inputs or internal parameters. They are the disturbance Yi,j, 
the rate constant Xi,j, and the position vector Pi,j. The position vector is a 2-d 
vector mapping the neuron onto the robot's workspace. The rate constant models 
the STA state's underlying dynamic time constant. The rate constant is used to 
encode whether or not a neuron maps onto an obstacle in the robot's workspace. 
The external disturbance is used to initiate the network's search for the optimal 
path. 
The evolution of the STA and LTA states is controlled by the state equations. These 
equations are assumed to change in a synchronous fashion. The STA state equation 
is 
Y Dktf(xk,t)) (4) 
where the summation is over all neurons contained within the neighborhood, Ni,i, 
of the (i,j)th neuron. The function G(x) is zero if x < 0 and is x if x >_ 0. 
This function is used to prevent the neuron's activity level from falling below zero. 
Dkt are network parameters controlling the strength of lateral interactions between 
neurons. The LTA state equation is 
= w,,5 + 
Equation 5 means that the LTA state is incremented by one every time the (i, j)th 
neuron's output changes. 
Specific choices for the interconnection weights result in oscillatory behaviour. The 
specific network under consideration is a cooperative field where D! = i if (k, l)  
542 Lemmon 
(i,j) and Dtt = -A < 0 if (k,l) = (i,j). Without loss of generality it will also be 
assumed that the external disturbances are bounded between zero and one. It is also 
assumed that the rate constants, Ai,j are either zero or unity. In the path planning 
application, rate constants will be used to encode whether or not a given neuron 
represents an obstacle or a point in the free-workspace. Consequently, any neuron 
where Ai,j = 0 will be called an obstacle neuron and any neuron where Xi,j = 1 
will be called a free-space neuron. Under these assumptions, it has been shown 
(Lemmon, 1991a) that once a free-space neuron turns active it will be oscillating 
with a period of 2 provided it has at least one free-space neuron as a neighbor. 
3 Path Planning and Neural Fields 
The oscillatory neural field introduced above can be used to generate solutions of 
the Bellman iteration (Eq. 3) with respect to the supremum norm. Assume that all 
neuron STA and LTA states are zero at time 0. Assume that the position vectors 
form a regular grid of points, Pi,i = (iA, jA) t where A is a constant controlling the 
grid's size. Assume that all external disturbances but one are zero. In other words, 
for a specific neuron with label (i,j), yt,t = 1 if (k,l) = (i,j) and is zero otherwise. 
Also assume a neighborhood structure where Ni,j consist of the (i, j)th neuron and 
its eight nearest neighbors, Ni,j = {(i+ k,j+ l);k =-1,0, 1;/= -1,0, 1}. With 
these assumptions it has been shown (Lemmon, 1991a) that the LTA state for the 
(i, j)th neuron at time n will be given by G(n - pit) where pit is the length of the 
shortest path from pt,I and Pi,i with respect to the supremum norm. 
This fact can be seen quite clearly by examining the LTA state's dynamics in a 
small closed neighborhood about the (k,/)th neuron. First note that the LTA state 
equation simply increments the LTA state by one every time the neuron's STA state 
toggles its output. Since a neuron oscillates after it has been initially activated, the 
LTA state, will represent the time at which the neuron was first activated. This 
time, in turn, will simply be the length of the shortest path from the site of 
the initial distrubance. In particular, consi
