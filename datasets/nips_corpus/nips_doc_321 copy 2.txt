A Method for the Efficient Design 
of Boltzmann Machines for Classification 
Problems 
Ajay Gupta and Wolfgang Maass* 
Department of Mathematics, Statistics, and Computer Science 
University of Illinois at Chicago 
Chicago IL, 60680 
Abstract 
We introduce a method for the efficient design of a Boltzmann machine (or 
a Hopfield net) that computes an arbitrary given Boolean function f. This 
method is based on an efficient simulation of acyclic circuits with threshold 
gates by Boltzmann machines. As a consequence we can show that various 
concrete Boolean functions f that are relevant for classification problems 
can be computed by scalable Boltzmann machines that are guaranteed 
to converge to their global maximum configuration with high probability 
after constantly many steps. 
I INTRODUCTION 
A Boltzmann machine ([AHS], [HS], [AK]) is a neural network model in which the 
units update their states according to a stochastic decision rule. It consists of a 
set H of units, a set C of unordered pairs of elements of H, and an assignment 
of connection strengths S : C --* R. A configuration of a Boltzmann machine 
is a map k : H --* {0, 1}. The consensus C(k) of a configuration k is given by 
C(k) = Y{u,v}Ec S({u, v}). k(u). k(v). If the Boltzmann machine is currently in 
configuration k and unit u is considered for a state change, then the acceptance 
*This paper was written during a visit of the second author at the Department of 
Computer Science of the University of Chicago. 
825 
826 Gupta and Maass 
probability for this state change is given by  Here AC is the change in 
l+e-,c/c � 
the value of the consensus function C that would result from this state change of 
u, and c > 0 is a fixed parameter (the temperature). 
Assume that n units of a Boltzmann machine B have been declared as input units 
and m other units as output units. One says that B computes a function f � 
{0, 1} n --. {0, 1} m if for any clamping of the input units of B according to some _a  
{0, 1} n the only global maxima of the consensus function of the clamped Boltzmann 
machine are those configurations where the output units are in the states given by 
f(a). 
Note that even if one leaves the determination of the connection strengths for a 
Boltzmann machine up to a learning procedure ([AHS], [HS], [AK]), one has to 
know in advance the required number of hidden units, and how they should be 
connected (see section 10.4.3 of [AK] for a discussion of this open problem). 
Ad hoc constructions of efficient Boltzmann machines tend to be rather difficult 
(and hard to verify) because of the cyclic nature of their computations. 
We introduce in this paper a new method for the construction of efficient Boltzmann 
machines for the computation of a given Boolean function f (the same method can 
also be used for the construction of Hopfield nets). We propose to construct first an 
acyclic Boolean circuit T with threshold gates that computes f (this turns out to 
be substantially easier). We show in section 2 that any Boolean threshold circuit T 
can be simulated by a Boltzmann machine B(T) of the same size as T. Furthermore 
we show in section 3 that a minor variation of B(T) is likely to converge very fast. 
In Section 4 we discuss applications of our method for various concrete Boolean 
functions. 
2 
SIMULATION OF THRESHOLD CIRCUITS BY 
BOLTZMANN MACHINES 
A threshold circuit T (see [M], [PS], [R], [HMPST]) is a labeled acyclic directed 
graph. We refer to the number of edges that are directed into (out of) a node of T 
as the indegree (outdegree) of that node. Its nodes of indegree 0 are labeled by input 
variables xi(i  {1,... ,n}). Each node g of indegree ! > 0 in T is labeled by some 
arbitrary Boolean threshold function Fg: {0, 1}l --* {0, 1}, where Fg(yl,...,yt)= 1 
. 
if and only lfyd=l oqyi _ t (for some arbitrary parameters c,..., ct, t G R; w.l.o.g. 
o1,..., oq,t  Z [M]). One views such node g as a threshold gate that computes 
Fg. If m nodes of a threshold circuit T are in addition labeled as output nodes, 
one defines in the usual manner the Boolean function f: {0, 1} -* {0, 1}  that is 
computed by T. 
We simulate T by the following Boltzmann machine B(T) = < L/, C, S > (note that 
T has directed edges, while B(T) has undirected edges). We reserve for each node g 
of T a separate unit b(g) of B(T). We set 
{b(g)lg is a node of T} and 
{{b(g'),b(g)}[g',g are nodes of T so that either g' = g or 
g, g are connected by an edge in T}. 
Efficient Design of Boltzmann Machines 827 
Consider an arbitrary unit b(9) of B(T). We define the connection strengths 
S({b(9))) and S({b(9'),b(9))) (for edges ( 9',9 ) ofT) by induction on the length 
of the longest path in T from 9 to a node of T with outdegree 0. 
If g is a gate of T with outdegree 0 then we define S({b(g)}) := -2t + 1, where t is 
the threshold of 9, and we set S({b(9'),b(9)}) := 2a(< 9',9 >) (where a(< 9',9 >) 
is the weight of the directed edge < 9', 9 > in T). 
Assume that g is a threshold gate of T with outdegree > 0. Let g,..., g be the 
k 
immediate successors of g in T. Set w :: ]]i= IS({b(g),b(gi)})l (we assume that 
the connection strengths S({b(g),b(gi)}) have already been defined). We define 
S({b(g)}) := -(2w+ 2).t + w+ 1, where t is the threshold of gate g. Furthermore 
for every edge < g,g > in T we set S({b(g),b(g)}) := (2w + 2) a (< g',g >). 
Remark: It is obvious that for problems in TC � (see section 4) the size of connec- 
tion strengths in B(T) can be bounded by a polynomial in n. 
Theorem 2.1 For any threshold circuit T the Boltzmann machine B(T) computes 
the same Boolean function as T. 
Proof of Theorem 2.1: 
Let a  {0, 1} n be an arbitrary input for circuit T. We write g(a) e {0, 1} for the 
output of gate g of T for circuit input a. 
Consider the Boltzmann machine B(T)a_ with the n units b(g) for input nodes g of 
T clamped according to a. We show that the configuration Ka of B(T)a where b(g) 
is on if and only if g(a) = 1 is the only global maximum (f fact: the only local 
maximum) of the consensus function C for B(T)a. 
Assume for a contradiction that configuration K of B(T)a_ is a global maximum of 
the consensus function C and K 7 Ka. Fix a node g of T of minimal depth in T 
so that K(b(g)) 7 Ka(b(g)) - g(a). B-y definition of B(T)a this node g is not an 
input node of T. Let K' result form K by changing the state of b(g). We will show 
that C(K ) > C(K), which is a contradiction to the choice of K. 
We have (by the definition of C) 
C(K') - C(K) : (1 - 2K(b(g))) . (S. + $2 + S({b(g)})), where 
S1 '= ]]{K(b(9'))' S({b(9'),b(9)})l < 9',9 > is an edge in T} 
S2 :: ]]{K(b(9'))- S({b(9),b(f)})] < 9,9' > is an edge in T}. 
Let w be the parameter that occurs in the definition of $({b(g)}) (set w := 0 if g 
has outdegree 0). Then IS2[ < w. Let pl,...,p, be the immediate predecessors 
of g in T, and let t be the threshold of gate g. Assume first that g(_a) = 1. Then 
$1 = (2w +2). ]]il a(< Pi,g >) .pi(a) > (2w+ 2).t. This implies that $1 + $2 > 
(2w + 2).t- w- 1, and therefore S1 + S + S({b(g) )) > 0, hence C(K')-C(K) > O. 
If g(_a) = 0 then we have l a(< pi,g >)' p(a__) < t - 1, thus $ = (2w + 2). 
 a(< p,g >). p(a) < (2w + 2) � t - 2w - 2. This implies that $ + $2 < 
(2w + 2). t - w - 1, and therefore $ + S2 + S({b(g)}) < 0. We have in this case 
K(b(g)) = 1, hence C(K')-C(K) = (-1)-(S1 + S + $({b(g)})) > O. 1 
828 Gupa and Maass 
3 
THE CONVERGENCE SPEED OF THE 
CONSTRUCTED BOLTZMANN MACHINES 
We show that the constructed Boltzmann machines will converge relatively fast to 
a global maximum configuration. This positive result holds both if we view B (T) as 
a sequential Boltzmann machine (in which units are considered for a state change 
one at a time), and if we view B(T) as a parallel Boltzmann machine (where several 
units are simultaneously considered for a state change). In fact, it even holds for 
unlimited parallelism, where every unit is considered for a state change at every 
step. Although unlimited parallelism appears to be of particular interest in the 
context of brain models and for the design of massively parallel machines, there are 
hardly any positive results known for this case (see section 8.3 in [AK]). 
If g is a gate in T with outdegree  I then the current state of unit b(g) of B(T) 
becomes relevant at several different time points (whenever one of the immediate 
successors of g is considered for a state change). This effect increases the probability 
that unit b(g) may cause an error. Therefore the error probability of an output 
unit of B(T) does not just depend on the number of nodes in T, but on the number 
N(T) of nodes in a tree T  that results if we replace in the usual fashion the directed 
graph of T by a tree T  of the same depth (one calls a directed graph a tree if all of 
its nodes have outdegree _ 1). 
To be precise, we define by induction on the depth of g for each gate g of T a 
tree Tree(g) that replaces the subcircuit of T below g. If g,...,g are the im- 
mediate predecessors of g in T then Tree(g) is the tree which has g as root and 
Tree(g),... ,Tree(g) as immediate subtrees (it is understood that if some gi has 
another immediate successor g  g then different copies of Tree(g/) are employed 
in the definition of Tree(g) and Tree(g)). 
We write ITree(g)] for the number of nodes in Tree(g) , and N(T) for 
(ITree(g)l Ig is an output node of T). It is easy to see that if T is synchronous 
(i.e. depth (g) -- depth(g') + 1 for all edges  g,g  in T) then ]Wree(g)l s 
for any node g in T of depth d which has s nodes in the subcircuit of T below g. 
Therefore N(T) is polynomial in n if T is of constant depth and polynomial size 
(this can be achieved for all problems in TC �, see Section 4). 
We write B(T) for the variation of the Boltzmann machine B(T) of section 2 where 
each connection strength in B(T) is multiplied by 5 (5  0). Equivalently one could 
v
