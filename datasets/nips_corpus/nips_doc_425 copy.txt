Direct memory access using two cues: Finding 
the intersection of sets in a connectionist model 
Janet Wiles, Michael S. Humphreys, John D. Bain and Simon Dennis 
Departments of Psychology and Computer Science 
University of Queensland QLD 4072 Australia 
email: j anetCWpsych.psy.uq.oz.au 
Abstract 
For lack of alternative models, search and decision processes have provided the 
dominant paradigm for human memory access using two or more cues, despite 
evidence against search as an access process (Humphreys, Wiles & Bain, 1990). 
We present an alternative process to search, based on calculating the intersection 
of sets of targets activated by two or more cues. Two methods of computing 
the intersection are presented, one using information about the possible targets, 
the other constraining the cue-target strengths in the memory matrix. Analysis 
using orthogonal vectors to represent the cues and targets demonstrates the 
competence of both processes, and simulations using sparse distributed 
representations demonstrate the performance of the latter process for tasks 
involving 2 and 3 cues. 
1 INTRODUCTION 
Consider a task in which a subject is asked to name a word that rhymes with oast. The 
subject answers most, (or post, host, toast, boast, ...). Now the subject is asked to find 
a word that means a mythical being that rhymes with oast. She or he pauses slightly and 
replies ghost. 
The difference between the first and second questions is that the first requires the use of 
one cue to access memory. The second question requires the use of two cues - either 
combining them before the access process, or combining the targets they access. There 
are many experimental paradigms in psychology in which a subject uses two or more 
cues to perform a task (Rubin & Wallace, 1989). One default assumption underlying 
635 
636 Wiles, Humphreys, Bain, and Dennis 
many explanations for the effective use of two cues relies on a search process through 
memory. 
Models of human memory based on associative access (using conncctionist models) have 
provided an alternative paradigm to search processes for memory access using a single cuc 
(Anderson, Silverstein, Ritz & Jones, 1977; McClclland & Rumclhart, 1986), and for 
two cues which have been studied together (Humphreys, Bain & Pike 1989). In some 
respects, properties of these models correspond very closely to the characteristics of 
human memory (Rumclhart, 1989). In addition to the evidence against search processes 
for memory access using a single cuc, there is also experimental evidence against 
sequential search in some tasks requiring the combination of two cues, such as cued recall 
with an extra-list cuc, cued recall with a part-word cuc, lexical access and semantic access 
(Humphreys, Wiles & Bain, 1990). Furthermore, in some of these tasks it appears that 
the two cues have never jointly occurred with the target. In such a situation, the tensor 
product employed by Humphreys ct. al. to bind the two cues to the target cannot bc 
employed, nor can the co-occurrences of the two cues be encoded into the hidden layer of a 
three-layer network. In this paper wc present the computational foundation for an 
alternative process to search and decision, based on parallel (or direct) access for the 
intersection of sets of targets that arc retrieved in response to cues that have not been 
studied together. 
Definition of an intersection in the cue-target paradigm: Given a set of cue-target pairs, 
and two (or more) access cues, then the intersection specified by the access cues is defined 
to be the set of targets which are associated with both cues. If the cue-target strengths are 
not binary, then they are constrained to lie between 0 and 1, and targets in the intersection 
are weighted by the product of the cue-target strengths. A complementary definition for a 
union process could be the set of targets associated with any one or more of the access 
cues, weighted by the sum of the target strengths. 
In the models that are described below, we assume that the access cues and targets are 
represented as vectors, the cue-target associations are represented in a memory matrix and 
the set of targets retrieved in response to one or more cues is represented as a linear 
combination, or blend, of target vectors associated with that cue or cues. Note that under 
this definition, if there is more than one target in the intersection, then a second stage is 
required to select a unique target to output from the retrieved linear combination. We do 
not address this second stage in this paper. 
A task requiring intersection: In the rhyming task described above, the rhyme and 
semantic cues have extremely low separate probabilities of accessing the target, ghost, 
but a very high joint probability. In this study we do not distinguish between the 
representation of the semantic and part-word cues, although it would be required for a 
more detailed model. Instead, we focus on the task of retrieving a target weakly associated 
with two cues. We simulate this condition in a simple task using two cues, C1 and C2, 
and three targets, T1, T2 and T3. Each cue is strongly associated with one target, and 
weakly associated with a second target, as follows (strengths of association are shown 
above the arrows): 
C1 . T1, CI-'J T2, C2-'J T2, andC2-'- T3. 
Direct Memory Access Using Two Cues 637 
The intersection of the targets retrieved to the two cues, C1 and C2, is the target, T2, 
with a strength of 0.01. Note that in this example, a model based on vector addition 
would be insufficient to select target, T2, which is weakly associated with both cues, in 
preference to either target, T1 or T$, which are strongly associated with one cue each. 
IMPLEMENTATIONS OF INTERSECTION PROCESSES 
2.1 LOCAL REPRESENTATIONS 
Given a local representation for two sets of targets, their intersection can be computed by 
multiplying the activations elicited by each cuc. This method extends to sparse 
representations with some noise from cross product terms, and has bccn used by Dolan 
and Dyer (1989) in their tensor model, and Tourctzky and Hinton (1989) in the 
Distributed Conncctionist Production System (for further discussion scc Wiles, 
Humphreys, Bain & Dennis, 1990). However, multiplying activation strengths does not 
extend to fully distributed representations, since multiplication dcpencls on the basis 
representation (i.e., the target patterns themselves) and the cross-product terms do not 
necessarily cancel. One strong implication of this for implementing an intersection 
process, is that the choice of patterns is not critical in a linear process (such as vector 
addition) but can bc critical in a non-linear process (which is necessary for computing 
intersections). An intersection process requires more information about the target patterns 
themselves. 
It is interesting to note that the inner product of the target sets (equivalent to the match 
process in Humphreys ct. al.'s (1989) Matrix model) can bc used to determine whether or 
not the intersection of targets is empty, if the target vectors arc orthogonal, although it 
cannot bc used to find the particular vectors which arc in the intersection. 
2.2 USING INFORMATION ABOUT TARGET VECTORS 
A local representation enables multiplication of activation strengths because there is 
implicit knowledge about the allowable target vectors in the local representation itself. 
The first method wc describe for computing the intersection of fully distributed vectors 
uses information about the targets, explicitly represented in an auto-associative memory, 
to filter out cross-product terms: In separate operations, each cue is used to access the 
memory matrix and retrieve a composite target vector (the linear combination of 
associated targets). A temporary matrix is formed from the outer product of these two 
composite vectors. This matrix will contain product terms between all the targets in the 
intersection set as well as noise in the form of cross-product terms. The cross-product 
terms can bc filtered from the temporary matrix by using it as a retrieval cue for accessing 
a three-dimensional auto-associator (a tensor of rank 3) over all the targets in the original 
memory. If the target vectors arc orthonormal, then this process will produce a vector 
which contains no noise from cross-product terms, and is the linear combination of all 
targets associated with both cues (see Box 1). 
638 Wiles, Humphreys, Bain, and Dennis 
Box 1. Creating a temporary matrix from the product of the target vectors, then filtering 
out the noise terms: Let the cues and targets be represented by vectors which are mutually 
orthonormal (i.e., Ci. Ci = Ti. Ti = 1, Ci. Cj = Ti. Tj = 0, i, j = 1,2,3). The memory 
matrix, M, is formed from cue-target pairs, weighted by their respective strengths, as 
follows: 
M = 0.9C 1 Ti'+ O.lC 1 T 2' + O. lC 2 T 2' + 0.9C 2 T 3' 
where T' represems the transpose of T, and C i T i' is the outer product of C i and T i. 
In addition, let Z be a three-dimensional auto-associative memory (or tensor of rank 3) 
created over three orthogonal representations of each target (i.e., Ti is a column vector, Ti' 
is a row vector which is the transpose of Ti, and Ti is the vector in a third direction 
orthogonal to both, where i=1,2,3), as follows: 
Z = iTi ri'ri 
Let a two-dimensional temporary matrix, X, be formed by taking the outer product of 
target vectors retrieved to the access cues, as follows: 
x = (CM)(C2M)' 
= (0.9r + o. lr2) (o. lr 2 + 0.9r3)' 
= o.o9rr2' + 0.81rr3' + 0.mr2r2' + o.09r2r' 
Using the matrix X to access the auto-associator Z, will produce a vector from which all 
the cross-product terms have been filtered, as follows: 
X Z = (O.09TiT2'+O.81TiT3'+O.O1T2T2'+O.O9T2T $' ) (Y..iTi Ti'Ti) 
= (o.09rlr2')(Eiri r/rD + (o.srlr') (Zi ri r/r/') 
+ (o.or2r2') (  ri r/ r/' ) + (o.09r2r') (z r r'r ) 
= (O.01T2T2') (T 2 T 
