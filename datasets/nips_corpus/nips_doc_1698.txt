Lower Bounds on the Complexity of 
Approximating Continuous Functions by 
Sigmoidal Neural Networks 
Michael Schmitt 
Lehrstuhl Mathematik und Informatik 
Fakultt flit Mathematik 
Ruhr-Universitt Bochum 
D-44780 Bochum, Germany 
mschmitt Imi. ruhr-uni-bochum. de 
Abstract 
We calculate lower bounds on the size of sigmoidal neural networks 
that approximate continuous functions. In particular, we show 
that for the approximation of polynomials the network size has 
to grow as ((log k) U4) where k is the degree of the polynomials. 
This bound is valid for any input dimension, i.e. independently of 
the number of variables. The result is obtained by introducing a 
new method employing upper bounds on the Vapnik-Chervonenkis 
dimension for proving lower bounds on the size of networks that 
approximate continuous functions. 
1 Introduction 
Sigmoidal neural networks are known to be universal approximators. This is one of 
the theoretical results most frequently cited to justify the use of sigmoidal neural 
networks in applications. By this statement one refers to the fact that sigmoidal 
neural networks have been shown to be able to approximate any continuous function 
arbitrarily well. Numerous results in the literature have established variants of 
this universal approximation property by considering distinct function classes to be 
approximated by network architectures using different types of neural activation 
functions with respect to various approximation criteria, see for instance [1, 2, 3, 5, 
6, 11, 12, 14, 15]. (See in particular Scarselli and Tsoi [15] for a recent survey and 
further references.) 
All these results and many others not referenced here, some of them being construc- 
tive, some being merely existence proofs, provide upper bounds for the network size 
asserting that good approximation is possible if there are sufficiently many net- 
work nodes available. This, however, is only a partial answer to the question that 
mainly arises in practical applications: Given some function, how many network 
nodes are needed to approximate it? Not much attention has been focused on 
establishing lower bounds on the network size and, in particular, for the approx- 
imation of functions over the reals. As far as the computation of binary-valued 
Complexity of Approximating Continuous Functions by Neural Networks 329 
functions by sigmoidal networks is concerned (where the output value of a network 
is thresholded to yield 0 or 1) there are a few results in this direction. For a spe- 
cific Boolean function Koiran [9] showed that networks using the standard sigmoid 
a(y) = 1/(1 + e -y) as activation function must have size fl(n /4) where n is the 
number of inputs. (When measuring network size we do not count the input nodes 
here and in what follows.) Maass [13] established a larger lower bound by construct- 
ing a binary-valued function over l n and showing that standard sigmoidal networks 
require fl(n) many network nodes for computing this function. The first work on 
the complexity of sigmoidal networks for approximating continuous functions is due 
to DasGupta and Schnitger [4]. They showed that the standard sigmoid in network 
nodes can be replaced by other types of activation functions without increasing the 
size of the network by more than a polynomial. This yields indirect lower bounds 
for the size of sigmoidal networks in terms of other network types. DasGupta and 
Schnitger [4] also claimed the size bound A (/') for sigmoidal networks with d 
layers approximating the function sin(Ax). 
In this paper we consider the problem of using the standard sigmoid a(y) = 
1/(1 + e -y) in neural networks for the approximation of polynomials. We show 
that at least fl((log k) x/4) network nodes are required to approximate polynomials 
of degree k with small error in the l norm. This bound is valid for arbitrary input 
dimension, i.e., it does not depend on the number of variables. (Lower bounds can 
also be obtained from the results on binary-valued functions mentioned above by 
interpolating the corresponding functions by polynomials. This, however, requires 
growing input dimension and does not yield a lower bound in terms of the degree.) 
Further, the bound established here holds for networks of any number of layers. As 
far as we know this is the first lower bound result for the approximation of polyno- 
mials. From the computational point of view this is a very simple class of functions; 
they can be computed using the basic operations addition and multiplication only. 
Polynomials also play an important role in approximation theory since they are 
dense in the class of continuous functions and some approximation results for neu- 
ral networks rely on the approximability of polynomials by sigmoidal networks (see, 
e.g., [2, 15]). 
We obtain the result by introducing a new method that employs upper bounds on 
the Vapnik-Chervonenkis dimension of neural networks to establish lower bounds 
on the network size. The first use of the Vapnik-Chervonenkis dimension to obtain 
a lower bound is due to Koiran [9] who calculated the above-mentioned bound 
on the size of sigmoidal networks for a Boolean function. Koiran's method was 
further developed and extended by Maass [13] using a similar argument but another 
combinatorial dimension. Both papers derived lower bounds for the computation 
of binary-valued functions (Koiran [9] for inputs from {0, 1} n, Maass [13] for inputs 
from l n). Here, we present a new technique to show that and how lower bounds can 
be obtained for networks that approximate continuous functions. It rests on two 
fundamental results about the Vapnik-Chervonenkis dimension of neural networks. 
On the one hand, we use constructions provided by Koiran and Sontag [10] to build 
networks that have large Vapnik-Chervonenkis dimension and consist of gates that 
compute certain arithmetic functions. On the other hand, we follow the lines of 
reasoning of Karpinski and Macintyre [7] to derive an upper bound for the Vapnik- 
Chervonenkis dimension of these networks from the estimates of Khovanskil [8] and 
a result due to Warren [16]. 
In the following section we give the definitions of sigmoidal networks and the Vapnik- 
Chervonenkis dimension. Then we present the lower bound result for function 
approximation. Finally, we conclude with some discussion and open questions. 
330 M. Schmitt 
2 Sigmoidal Neural Networks and VC Dimension 
We briefly recall the definitions of a sigmoidal neural network and the Vapnik- 
Chervonenkis dimension (see, e.g., [7, 10]). We consider feedforward neural networks 
which have a certain number of input nodes and one output node. The nodes 
which are not input nodes are called computation nodes and associated with each 
of them is a real number t, the threshold. Further, each edge is labelled with a 
real number w called weight. Computation in the network takes place as follows: 
The input values are assigned to the input nodes. Each computation node applies 
the standard sigmoid a(y) = 1/(1 + e -y) to the sum wxxx + ... + WrXr -- t where 
xx,..., xr are the values computed by the node's predecessors, w,..., wr are the 
weights of the corresponding edges, and t is the threshold. The output value of the 
network is defined to be the value computed by the output node. As it is common 
for approximation results by means of neural networks, we assume that the output 
node is a linear gate, i.e., it just outputs the sum wxxx + ... + wrxr - t. (Clearly, 
for computing functions on finite sets with output range [0, 1] the output node 
may apply the standard sigmoid as well.) Since a is the only sigmoidal function 
that we consider here we will refer to such networks as sigmoidal neural networks. 
(Sigmoidal functions in general need to satisfy much weaker assumptions than a 
does.) The definition naturally generalizes to networks employing other types of 
gates that we will make use of (e.g. linear, multiplication, and division gates). 
The Vapnik-Chervonenkis dimension is a combinatorial dimension of a function class 
and is defined as follows: A dichotomy of a set S C_ I n is a partition of S into two 
disjoint subsets (So, Sx) such that So U Sx = S. Given a set . of functions mapping 
ll n to {0, 1} and a dichotomy (So, Sx) of $, we say that . induces the dichotomy 
(S0, Sx) on S if there is some f  . such that f(So) C_ {0} and f(Sx) C_ {1}. 
We say further that  shatters S if  induces all dichotomies on S. The Vapnik- 
Chervonenkis (VC) dimension of , denoted VCdim(), is defined as the largest 
number m such that there is a set of m elements that is shattered by . We refer 
to the VC dimension of a neural network, which is given in terms of a feedforward 
architecture, i.e. a directed acyclic graph, as the VC dimension of the class of 
functions obtained by assigning real numbers to all its programmable parameters, 
which are in general the weights and thresholds of the network or a subset thereof. 
Further, we assume that the output value of the network is thresholded at 1/2 to 
obtain binary values. 
3 Lower Bounds on Network Size 
Before we present the lower bound on the size of sigmoidal networks required for 
the approximation of polynomials we first give a brief outline of the proof idea. 
We will define a sequence of univariate polynomials (p,,x by means of which 
we show how to construct neural architectures Af,consistg of various types of 
gates such as linear, multiplication, and division gates, and, in particular, gates 
that compute some of the polynomials. Further, this architecture has a single 
weight as programmable parameter (all other weights and thresholds are fixed). 
We then demonstrate that, assuming the gates computing the polynomials can be 
approximated by sigmoidal neural networks sufficiently well, the architecture 
can shatter a certain set by assigning suitable values to its programmable weight. 
The final step i
