Finite State Automata that Recurrent 
Cascade-Correlation Cannot Represent 
Stefan C. Kremer 
Department of Computing Science 
University of Alberta 
Edmonton, Alberta, CANADA T6H 5B5 
Abstract 
This paper relates the computational power of Fahlman's Recurrent 
Cascade Correlation (RCC) architecture to that of finite state automata 
(FSA). While some recurrent networks are FSA equivalent, RCC is not. 
The paper presents a theoretical analysis of the RCC architecture in the 
form of a proof describing a large class of FSA which cannot be realized 
by RCC. 
1 INTRODUCTION 
Recurrent networks can be considered to be def'med by two components: a network 
architecture, and a learning rule. The former describes how a network with a given set 
of weights and topology computes its output values, while the latter describes how the 
weights (and possibly topology) of the network are updated to fit a specific problem. It is 
possible to evaluate the computational power of a network architecture by analyzing the 
types of computations a network could perform assuming appropriate connection weights 
(and topology). This type of analysis provides an upper bound on what a network can be 
expected to learn, since no system can learn what it cannot represent. 
Many recurrent network architectures have been proven to be finite state automaton or 
even Turing machine equivalent (see for example [Alon, 1991], [Goudreau, 1994], 
[Kremer, 1995], and [Siegelmann, 1992]). The existence of such equivalence proofs 
naturally gives confidence in the use of the given architectures. 
This paper relates the computational power of Fahlman's Recurrent Cascade Correlation 
architecture [Fahlman, 1991] to that of finite state automata. It is organized as follows: 
Section 2 reviews the RCC architecture as proposed by Fahlman. Section 3 describes 
finite state automata in general and presents some specific automata which will play an 
important role in the discussions which follow. Section 4 describes previous work by other 
Finite State Automata that Recurrent Cascade-Correlation Cannot Represent 613 
authors evaluating RCC's computational power. Section 5 expands upon the previous 
work, and presents a new class of automata which cannot be represented by RCC. Section 
6 further expands the result of the previous section to identify an infinite number of other 
unrealizable classes of automata. Section 7 contains some concluding remarks. 
2 THE RCC ARCHITECTURE 
The RCC architecture consists of three types of units: input units, hidden units and output 
units. After training, a RCC network performs the following computation: First, the 
activation values of the hidden units are initialized to zero. Second, the input unit 
activation values are initialized based upon the input signal to the network. Third, each 
hidden unit computes its new activation value. Fourth, the output units compute their new 
activations. Then, steps two through four are repeated for each new input signal. 
The third step of the computation, computing the activation value of a hidden unit, is 
accomplished according to the formula: 
Here, ai(t) represents the activation value of unit i at time t, o(e) represents a sigmoid 
squashing function with finite range (usually from 0 to 1), and W/j represents the weight 
of the connection from unit i to unitj. That is, each unit computes its activation value by 
multiplying the new activations of all lowered numbered units and its own previous 
activation by a set of weights, summing these products, and passing the sum through a 
logistic activation function. The recurrent weight Wj from a unit to itself functions as a 
sort of memory by transmitting a modulated version of the unit's old activation value. 
The output units of the RCC architecture can be viewed as special cases of hidden units 
which have weights of value zero for all connections originating from other output units. 
This interpretation implies that any restrictions on the computational powers of general 
hidden units will also apply to the output units. For this reason, we shall concern ourselves 
exclusively with hidden units in the discussions which follow. 
Finally, it should be noted that since this paper is about the representational power of the 
RCC architecture, its associated learning rule will not be discussed here. The reader 
wishing to know more about the learning rule, or requiring a more detailed description of 
the operation of the RCC architecture, is referred to [Fahlman, 1991]. 
3 FINITE STATE AUTOMATA 
A Finite State Automaton (FSA) [Hopcroft, 1979] is a formal computing machine def'med 
by a 5-tuple M=(Q,,6,qo,F), where Q represents a finite set of states, l a finite input 
alphabet, 6 a state transition function mapping Qxl to Q, qoQ the initial state, and FcQ 
a set of f'mal or accepting states. FSA accept or reject strings of input symbols according 
to the following computation: First, the FSA's current state is initialized to qo. Second, 
the next inut symbol of the string, selected from l, is presented to the automaton by the 
outside world. Third, the transition function, 6, is used to compute the FSA's new state 
based upon the input symbol, and the FSA's previous state. Fourth, the acceptability of 
the string is computed by comparing the current FSA state to the set of valid f'mal states, 
F. If the current state is a member of F then the automaton is said to accept the string of 
input symbols presented so far. Steps two through four are repeated for each input symbol 
presented by the outside world. Note that the steps of this computation mirror the steps 
of an RCC network's computation as described above. 
It is often useful to describe specific automata by means of a transition diagram [Hopcroft, 
1979]. Figure 1 depicts the transition diagrams of five FSA. In each case, the states, Q, 
614 $. C. KREMER 
are depicted by circles, while the transitions defined by 6 are represented as arrows from 
the old state to the new state labelled with the appropriate input symbol. The arrow 
labelled Start indicates the initial state, qo; and final accepting states are indicated by 
double circles. 
We now define some terms describing particular FSA which we will require for the 
following proof. The first concerns input signals which oscillate. Intuitively, the input 
signal to a FSA oscillates if every pth symbol is repeated for p > 1. More formally, a 
sequence of input symbols, s(t), s(t+ 1), s(t+2), ..., oscillates with a period ofp if and 
only if� is the minimum value such that: Vt s(t)=s(t+p). 
Our second definition concerns oscillations of a FSA's internal state, when the machine is 
presented a certain sequence of input signals. Intuitively, a FSA's internal state can 
oscillate in response to a given input sequence if there is some starting state for which 
every subsequent t th state is repeated. Formally, a FSA's state can oscillate with a period 
of t in response to a sequence of input symbols, s(t), s(t+ 1), s(t+2), ..., if and only if 
to is the minimum value for which: 
qo s.t. Vt 6(qo, s(t)) = 6( ... 6( 6( 6(q0, s(t)), s(t+l)), s(t+2)), ..., s(t+)) 
The recursive nature of this formulation is based on the fact a FSA's state depends on its 
previous state, which in turn depends on the state before, etc.. 
We can now apply these two defmifions to the FSA displayed in Figure 1. The automaton 
labelled a) has a state which oscillates with a period of t =2 in response to any sequence 
consisting of Os and ls (e.g. 00000..., 11111 .... , 010101..., etc.). Thus, we can 
say that it has a state cycle of period t=2 (i.e. qoqqoq...), when its input cycles with a 
period of p= 1 (i.e. 0000...). Similarly, when automaton b)'s input cycles with period 
p= 1 (i.e. 000000...), its state will cycle with period t=3 (i.e. qoqq2qoqq2...). 
For automaton c), things are somewhat more complicated. When the input is the sequence 
0000... , the state sequence will either be qoqoqoqo... or t3 t3 t3 t... depending on the 
initial state. On the other hand, when the input is the sequence 1111..., the state 
sequence will alternate between q0 and q. Thus, we say that automaton c) has a state cycle 
of t=2 when its input cycles with periodp= 1. But, this automaton can also have larger 
state cycles. For example, when the input oscillates with a period p=2 (i.e. 
01010101...), then the state of the automaton will oscillate with a period t=4 (i.e. 
qoqoqqqoqoqq...). Thus, we can also say that automaton c) has a state cycle of t=4 
when its input cycles with period p =2. 
The remaining automata also have state cycles for various input cycles, but will not be 
discussed in detail. The importance of the relationship between input period (p) and the 
state period (t) will become clear shortly. 
4 PREVIOUS RESULTS CONCERNING THE COMPUTATIONAL 
POWER OF RCC 
The first investigation into the computational powers of RCC was performed by Giles et. 
al. [Giles, 1995]. These authors proved that the RCC architecture, regardless of 
connection weights and number of hidden units, is incapable of representing any FSA 
which for the same input has an output period greater than 2 (p. 7). Using our 
oscillation definitions above, we can re-express this result as: if a FSA's input oscillates 
with a period of p= 1 (i.e. input is constant), then its state can oscillate with a period of 
at most =2. As already noted, Figure lb) represents a FSA whose state oscillates with 
a period of =3 in response to an input which oscillates with a period of p= 1. Thus, 
Giles et. al.'s theorem proves that the automaton in Figure lb) cannot be implemented (and 
hence learned) by a RCC network. 
Finite State Automata that Recurrent Cascade-Correlation Cannot Represent 615 
a) Start b) Start 
0, 1 0,1 1 
c) Start 
0 
1 
d) 
Start 
1 0 
1 
o 
0 '%) 
�) 
Start 
0 
0 
1 0,1 
1 
0 
Figure 1' Finite State Automata. 
Giles et. al. also examin
